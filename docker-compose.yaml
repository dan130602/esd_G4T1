version: "3.9"

services:
  #################################
  # Commerce Database
  #################################
  commerce-db:
    container_name: commerce-db
    build: ./backend/database-commerce
    ports:
      - "5433:5432"  # Host:Container
    volumes:
      - commerce_pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: commerce_db
    networks:
      - internal_network

  #################################
  # Error Logging Database
  #################################
  error-db:
    container_name: error-db
    build: ./backend/database-error
    ports:
      - "5434:5432"  # Host:Container
    volumes:
      - error_pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: error_db
    networks:
      - internal_network
  #################################
  # Transaction Database
  #################################
  transaction-db:
    container_name: transaction-db
    build: ./backend/database-transaction
    ports:
      - "5436:5432"  # Host:Container
    volumes:
      - transaction_pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transaction_db
    networks:
      - internal_network

  #################################
  # Redis Service
  #################################
  redis:
    image: redis:latest  # Pulls latest Redis image
    container_name: redis-cart
    ports:
      - "6379:6379"  # Redis default port
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - internal_network

  #################################
  # Cart Microservice
  #################################
  cart-service:
    container_name: cart-service
    build: ./backend/cart-service  
    ports:
      - "3007:3007"  
    depends_on:
      - redis  
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379 
    networks:
      - internal_network

  #################################
  # Login Microservice
  #################################
  login-service:
    container_name: login-service
    build: ./backend/login-service
    ports:
      - "3000:3000"  
    volumes:
      - ./Backend/login-service/firebase-service-account.json:/usr/src/app/firebase-service-account.json
    depends_on:
      - commerce-db
    environment:
      - NODE_ENV=production
      - DB_HOST=commerce-db  
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=commerce_db
    networks:
      - internal_network

  #################################
  # Order Microservice
  #################################
  order-service:
    container_name: order-service
    build: ./backend/order-service
    ports:
      - "5001:5001" 
    depends_on:
      - commerce-db
    networks:
      - internal_network

  #################################
  # Supplier Microservice
  #################################
  supplier-service:
    container_name: supplier-service
    build: ./backend/supplier-service
    ports:
      - "3011:3011"  
    depends_on:
      - commerce-db
    environment:
      - NODE_ENV=production
      - DB_HOST=commerce-db
      - commerce_db_port=5432
      - commerce_db_user=user
      - commerce_db_password=password
      - commerce_db_name=commerce_db
    networks:
      - internal_network
  #################################
  # Shop Microservice
  #################################
  shop-service:
    container_name: shop-service
    build: ./backend/shop-service
    ports:
      - "3006:3006"  
    depends_on:
      - commerce-db
    environment:
      - NODE_ENV=production
      - DB_HOST=commerce-db
      - commerce_db_port=5432
      - commerce_db_user=user
      - commerce_db_password=password
      - commerce_db_name=commerce_db
    networks:
      - internal_network

  #################################
  # Transaction Microservice
  #################################
  transaction-service:
    container_name: transaction-service
    build: ./backend/transaction-service
    environment:
      KAFKA_BROKER: kafka:29092
    ports:
      - "3009:3009"  
    depends_on:
      - transaction-db
    networks:
      - internal_network

  #################################
  # Cart Orchestrator 
  #################################
  cart-orchestrator:
    container_name: cart-orchestrator
    build: ./backend/cart-orchestrator  
    ports:
      - "4000:4000"  
    depends_on:
      - cart-service
    environment:
      - CART_SERVICE_URL=http://cart-service:3007  
    networks:
      - internal_network

  #################################
  # Refund Orchestrator
  #################################
  refund-orchestrator:
    container_name: refund-orchestrator
    build: ./backend/refund-orchestrator
    environment:
      KAFKA_BROKER: kafka:29092
    ports:
      - "3010:3010"  
    # depends_on:
      # - transaction-db
      # - transaction-service
      # - supplier-service
      # - order-service
      # - commerce-db
    networks:
      - internal_network

  #################################
  # Zookeeper Service
  #################################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - internal_network

  #################################
  # Kafka Service
  #################################
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - internal_network
    
  #################################
  # Kong Service
  #################################
  kong-database:
    image: postgres:17.4
    platform: linux/amd64
    restart: always
    networks:
      - internal_network
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"  # Note: changed from 5432 to avoid conflict with commerce-db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kong_pgdata:/var/lib/postgresql/data


  kong-migration:
    image: kong/kong-gateway:3.9
    platform: linux/amd64
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - internal_network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  kong:
    image: kong/kong-gateway:3.9
    platform: linux/amd64
    restart: always
    networks:
      - internal_network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"  # Public access
      - "8001:8001"  # Admin API
      - "8002:8002"  # Kong Manager GUI

  #################################
  # Payment Service
  #################################
  payment-service:
    container_name: payment-service
    build: ./backend/payment-service
    ports:
      - "5002:5002"
    depends_on:
      - commerce-db
      - error-db
      - kafka
    env_file:
      - ./backend/payment-service/.env
    networks:
      - internal_network

  #################################
  # Place An Order Orchestrator
  #################################
  place-order-orchestrator:
    container_name: place-order-orchestrator
    build: ./Backend/PlaceAnOrderOrchestrator
    ports:
      - "5004:5004"  
    depends_on:
      - order-service
      - shop-service
      - payment-service
      - cart-service
      - transaction-service
      - transaction-db
      - kafka
    environment:
      - server.port=5004
      - spring.kafka.bootstrap-servers=kafka:29092
      - spring.kafka.consumer.group-id=orchestrator-group
      - spring.kafka.consumer.auto-offset-reset=earliest
      - service.order.url=http://order-service:5001
      - service.shop.url=http://shop-service:3006
      - service.payment.url=http://payment-service:5002
      - service.transaction.url=http://transaction-service:3009
      - service.cart.url=http://cart-service:3007
    networks:
      - internal_network
  
volumes:
  commerce_pgdata:
    driver: local
  error_pgdata:
    driver: local
  transaction_pgdata:
    driver: local
  redis-data:
    driver: local
  kong_pgdata:
    driver: local

networks:
  internal_network:
    driver: bridge
